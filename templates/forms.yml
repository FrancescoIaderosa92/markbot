# Some of these rules are taken from, or inspired by, a11y.css
# © 2013-2016 Gaël Poupard
# Licensed under the MIT license
# https://ffoodd.github.io/a11y.css/

allFiles:
  html:
    hasNot:
      - check: 'form:not([action]), form[action=" "], form[action=""]'
        message: 'The `action` attribute on a `<form>` tag must point somewhere'
      - check: 'fieldset > *:not(legend):first-child, fieldset > legend:not(:first-child)'
        message: 'The `<legend>` tag must be the first element inside a `<fieldset>`'
      - check: 'button[class*="disabled"]:not([disabled]):not([readonly])'
        message: 'Instead of using a “disabled” class the button should be set to `disabled` with the `disabled` attribute'
      - check: 'button:empty:not([aria-label]):not([aria-labelledby])'
        message: 'Buttons need to have content inside the open & close tags or a labeling attribute: `aria-label` or `aria-labelledby`'
      - check: 'button[aria-label=""], button[aria-labelledby=""]'
        message: 'The `aria-label` or `aria-labelledby` cannot be empty on a `<button>` tag'
      - check: '[type="radio"]:not([name])'
        message: 'Radio buttons must always have a `name` attribute for grouping elements together'
      - check: 'label:not([for]), label[for=" "], label[for=""]'
        message: 'The `<label>` tag must always have a proper `for` attribute'
      - check: 'input:not([type="button"]):not([type="submit"]):not([type="hidden"]):not([type="reset"]):not([type="image"]):not([id]):not([aria-label]):not([aria-labelledby]), textarea:not([id]):not([aria-label]):not([aria-labelledby]), select:not([id]):not([aria-label]):not([aria-labelledby])'
        message: 'All form fields should have `id` attributes so their `label` tags can be associated properly, or at least one of these attributes: `aria-label`, `aria-labelledby`'
      - check: 'input[type="reset"]:not([value]):not([aria-label]):not([aria-labelledby]), input[type="submit"]:not([value]):not([aria-label]):not([aria-labelledby]), input[type="button"]:not([value]):not([aria-label]):not([aria-labelledby])'
        message: 'Button `<input>` tags must have a label using one of the following attributes: `value`, `aria-label`, `aria-labelledby`'
      - check: 'button:not([type]):not([form]):not([formaction]):not([formtarget])'
        message: 'The `<button>` tag should always specify a `type` attribute and if outside a `<form>` should specify `form`, `formaction` or `formtarget` attributes'
      - check: 'button[type="reset"][formmethod], button[type="reset"][formaction], button[type="reset"][formtarget], button[type="reset"][formenctype], button[type="reset"][formnovalidate], button[type="button"][formmethod], button[type="button"][formaction], button[type="button"][formtarget], button[type="button"][formenctype], button[type="button"][formnovalidate]'
        message: 'Only `<button>` tags with `type="submit"` should use the `form*` attributes'
      - check: 'optgroup:not([label])'
        message: 'The `<optgroup>` tag must always specify a `label` attribute'
      - check: '[placeholder]:not([aria-label]):not([aria-labelledby])'
        message: 'When using a `placeholder` also make sure there’s a `<label>` or one of these labeling attributes: `aria-label`, `aria-labelledby`'
        type: warning

  functionality:
    label: 'Forms'
    tests:
      # Test that all radio button groups are inside `<fieldset>` tags
      - |
        const elems = $$('[type="radio"]');

        for (let elem of elems) {
          let hasFieldset = elem.closest('fieldset');

          if (!hasFieldset) return fail('All radio button groups must be inside a `<fieldset>` tag');
        }

        pass();

      # Test that there are no duplicate `<label for="">` attributes
      - |
        const elems = $$('label');
        let labelFors = [];

        for (let elem of elems) {
          let labelFor = elem.getAttribute('for').trim();

          if (!labelFor) return fail('All `<label>` tags must have a `for` attribute');
          if (labelFors.includes(labelFor)) return fail(`More than one label’s \`for\` attribute points to the \`id\` of \`${labelFor}\``);

          labelFors.push(labelFor);
        }

        pass();

      # Test that at least one form input element is `required`
      - |
        const elems = $$('input, select, textarea');
        let foundRequired = false;

        for (let elem of elems) {
          if (elem.required) foundRequired = true;
        }

        if (elems && elems.length > 0 && !foundRequired) return fail('At least one form input field (`<input>`, `<select>` or `<textarea>`) must be required, using the `required` attribute');

        pass();

      # Test to make sure there’s an associated `<label>` for every input or `aria-label` or `aria-labelledby`
      - |
        const elems = $$('input:not([aria-labelledby]):not([aria-label]), select:not([aria-labelledby]):not([aria-label]), textarea:not([aria-labelledby]):not([aria-label])');

        for (let elem of elems) {
          let theLabel;

          if (!elem.id) return fail('Some form input fields (`<input>`, `<select>` or `<textarea>`) are missing `id` attributes');

          theLabel = document.querySelector(`label[for="${elem.id}"]`);

          if (!theLabel) return fail(`The form input \`<${elem.tagName.toLowerCase()}#${elem.id}>\` does not have an associated \`<label>\` element or one of the following attributes: \`aria-label\`, \`aria-labelledby\``);
        }

        pass();
